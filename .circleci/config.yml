version: 2

jobs:
  check-code-formatting:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers

    steps:
      - checkout
      - run:
          name: Install black
          command: "sudo pip install black"
      - run:
          name: Check formatting with black
          command: "black --check ."

  # Core
  python-2.7-core:
    docker:
      - image: circleci/python:2.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_27: python2.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py27-core"
          no_output_timeout: 20m

  python-3.5-core:
    docker:
      - image: circleci/python:3.5-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_35: python3.5

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py35-core"
          no_output_timeout: 20m

  python-3.6-core:
    docker:
      - image: circleci/python:3.6-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_36: python3.6

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py36-core"
          no_output_timeout: 20m

  python-3.7-core:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_37: python3.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py37-core"
          no_output_timeout: 20m

  python-3.7-percy:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PERCY_ENABLED: True
          PERCY_PROJECT: plotly/plotly.py

    steps:
      - checkout
      - run:
          name: Inject Percy Environment variables
          command: |
            echo 'export PERCY_TOKEN="$PERCY_PYTHON_TOKEN_V0"' >> $BASH_ENV
      - run:
          name: Install requirements
          command: |
            sudo pip install --upgrade virtualenv
            python -m venv venv || virtualenv venv
            . venv/bin/activate
            pip install -e ./packages/python/plotly
      - run:
          name: Build html figures
          command: |
            . venv/bin/activate
            pip install pandas statsmodels --quiet
            python test/percy/plotly-express.py
      - run:
          name: Run percy snapshots
          command: |
            npx percy snapshot test/percy/
            rm test/percy/*.html

  # Optional
  python-2.7-optional:
    docker:
      - image: circleci/python:2.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_27: python2.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py27-optional"
          no_output_timeout: 20m

  python-3.5-optional:
    docker:
      - image: circleci/python:3.5-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_35: python3.5

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py35-optional"
          no_output_timeout: 20m

  python-3.6-optional:
    docker:
      - image: circleci/python:3.6-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_36: python3.6

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py36-optional"
          no_output_timeout: 20m

  python-3.7-optional:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_37: python3.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/plotly; tox -e py37-optional"
          no_output_timeout: 20m

  # Plot.ly
  python-2.7-plot_ly:
    docker:
      - image: circleci/python:2.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_27: python2.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/chart-studio; tox -e py27-plot_ly"
          no_output_timeout: 20m

  python-3.5-plot_ly:
    docker:
      - image: circleci/python:3.5-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_35: python3.5

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/chart-studio; tox -e py35-plot_ly"
          no_output_timeout: 20m

  python-3.7-plot_ly:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_37: python3.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install tox"
      - run:
          name: Test with tox
          command: "cd packages/python/chart-studio; tox -e py37-plot_ly"
          no_output_timeout: 20m

  python-2-7-orca:
    docker:
      - image: circleci/node:10.9-stretch-browsers
        environment:
          PYTHON_VERSION: 2.7

    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-27-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
      - run:
          name: Create conda environment
          command: .circleci/create_conda_optional_env.sh

      - save_cache:
          key: conda-27-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
          paths:
            - /home/circleci/miniconda/
      - run:
          name: Run Tests
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate circle_optional
            pytest --disable-warnings packages/python/plotly/plotly/tests/test_core
            pytest packages/python/plotly/plotly/tests/test_orca

      - store_artifacts:
          path: plotly/tests/test_orca/images/linux/failed

  python-3-5-orca:
    docker:
      - image: circleci/node:10.9-stretch-browsers
        environment:
          PYTHON_VERSION: 3.5

    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-35-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
      - run:
          name: Create conda environment
          command: .circleci/create_conda_optional_env.sh

      - save_cache:
          key: conda-35-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
          paths:
            - /home/circleci/miniconda/
      - run:
          name: Run Tests
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate circle_optional
            pytest --disable-warnings packages/python/plotly/plotly/tests/test_core
            pytest packages/python/plotly/plotly/tests/test_orca

      - store_artifacts:
          path: plotly/tests/test_orca/images/linux/failed

  python-3-7-orca:
    docker:
      - image: circleci/node:10.9-stretch-browsers
        environment:
          PYTHON_VERSION: 3.7

    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-37-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
      - run:
          name: Create conda environment
          command: .circleci/create_conda_optional_env.sh

      - save_cache:
          key: conda-37-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
          paths:
            - /home/circleci/miniconda/
      - run:
          name: Run Tests
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate circle_optional
            pytest --doctest-modules --ignore packages/python/plotly/plotly/tests --ignore packages/python/plotly/plotly/matplotlylib/mplexporter/tests packages/python/plotly/plotly
            pytest --disable-warnings packages/python/plotly/plotly/tests/test_core
            pytest packages/python/plotly/plotly/tests/test_orca

      - store_artifacts:
          path: plotly/tests/test_orca/images/linux/failed

  plotlyjs_dev_build:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_37: python3.7
          LANG: en_US.UTF-8

    steps:
      - checkout
      - run:
          name: Install tox
          command: "sudo pip install retrying tox black inflect"
      - run:
          name: Update jupyterlab-plotly version
          command: "cd packages/python/plotly; python setup.py updateplotlywidgetversion"
      - run:
          name: Update plotly.js to dev
          command: "cd packages/python/plotly; python setup.py updateplotlyjsdev"
      - run:
          name: Test with tox
          command: |
            cd packages/python/plotly
            locale
            tox -e py37-core -- -k 'not nodev'
          no_output_timeout: 20m
      - run:
          name: Commit
          command: |
            cd packages/python/plotly
            sudo mkdir /dist
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            git add -A
            git commit -m "Codegen"
          when: always
      - run:
          name: Build source distribution packages
          command: |
            cd packages/python/plotly
            python setup.py sdist
            sudo cp dist/* /dist
          when: always
      - run:
          name: npm-pack widget
          command: |
            cd packages/javascript/jupyterlab-plotly/
            npm install webpack
            npm pack
            sudo cp ./jupyterlab-plotly* /dist
          when: always
      - store_artifacts:
          path: packages/python/plotly/dist

  build-doc:
    resource_class: xlarge
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.8-node

        working_directory: ~/project

    steps:
      - add_ssh_keys:
          fingerprints:
            - "dc:5f:39:48:00:b4:72:34:e1:d2:c4:e1:1f:d1:e2:ce" #plotlydocbot

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "doc/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            cd doc
            python3 -m venv venv
            . venv/bin/activate
            npm install electron@1.8.4
            npm install orca
            pip uninstall -y plotly
            pip install -r requirements.txt
            if [ "${CIRCLE_BRANCH}" != "doc-prod" ]; then
              pip uninstall -y plotly
              cd ../packages/python/plotly
              python3 setup.py install
              cd ../../../doc
            fi
            echo 'export PATH="/home/circleci/project/doc/node_modules/.bin:$PATH"' >> $BASH_ENV
            sudo apt-get install -y poppler-utils libxtst6 xvfb libgtk2.0-0 libgconf-2-4 libnss3 libasound2 rename
            cd ..

      - save_cache:
          paths:
            - ./doc/venv
            - ./doc/node_modules
          key: v1-dependencies-{{ checksum "doc/requirements.txt" }}

      - run:
          name: make html
          command: |
            cd doc
            . venv/bin/activate
            echo ${mapbox_token} > python/.mapbox_token
            make -kj8 || make -kj8
            curl https://raw.githubusercontent.com/plotly/graphing-library-docs/master/front-matter-ci.py > front-matter-ci.py
            curl https://raw.githubusercontent.com/plotly/graphing-library-docs/master/check-or-enforce-order.py > check-or-enforce-order.py
            python front-matter-ci.py build/html
            python check-or-enforce-order.py build/html
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              cd build/html
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:built
              rm -rf .git
              cd ../..
            fi
            tar -zcf build/html.tgz build/html
            rm -rf build/html build/ipynb
            cd ..

      - run:
          name: trigger doc build
          command: |
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              git clone --depth=1 https://github.com/plotly/graphing-library-docs.git
              cd graphing-library-docs
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git commit --allow-empty -m "deploying https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push
              cd ..
              rm -rf graphing-library-docs
            fi

      - run:
          name: make doc
          command: |
            cd doc
            . venv/bin/activate
            cd apidoc
            make html
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              cd _build/html
              touch .nojekyll
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git add .nojekyll
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:gh-pages
              rm -rf .git
              cd ../..
            fi

            cd ../..

      - store_artifacts:
          path: doc/build
          destination: doc/build

workflows:
  version: 2
  code_formatting:
    jobs:
      - check-code-formatting
  dev_build:
    jobs:
      - plotlyjs_dev_build

  build:
    jobs:
      - python-2.7-core
      - python-3.5-core
      - python-3.6-core
      - python-3.7-core
      - python-3.7-percy
      - python-2.7-optional
      - python-3.5-optional
      - python-3.6-optional
      - python-3.7-optional
      - python-3.7-plot_ly
      - python-2-7-orca
      - python-3-5-orca
      - python-3-7-orca
      - build-doc
